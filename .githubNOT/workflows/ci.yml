name: Node.js CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: [18.x, 20.x]

    runs-on: ${{ matrix.os }}

    environment: production

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

        # Caching node_modules
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Installera dependencies
      - name: Install dependencies
        run: npm ci

      # 2. Formattera, linta och bygga
      - name: Run Prettier
        run: npm run format --if-present

      - name: Run ESLint
        run: npm run lint:fix

      # 3. Genererar Prisma Client
      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build project
        run: npm run build

      # 4. Databas migrering
      - name: Run database migrations
        run: npx prisma migrate deploy

      # 5. Kör tester
      - name: Run tests
        run: npm test -- --detectOpenHandles

      # 6. Skapa artifact för build-output
      - name: Archive build output
        uses: actions/upload-artifact@v3
        with:
          name: build-output-${{ matrix.os }}-node-${{ matrix.node-version }}
          path: |
            dist
            build
          retention-days: 5
